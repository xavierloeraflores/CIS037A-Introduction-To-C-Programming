

/* 
 * 6.10
 * Sales Commissions
 * Author: Xavier Loera Flores
 * 4/11/2018
 */

#include <stdio.h>
#include <stdlib.h>

/*
 * 
 */
int main(int argc, char** argv) {
    int salaries[9], count, salary;
    for (int i =0; i<9;i++){
        salaries[i]=0;}
    
    while(salary>=0.0){
        count = 0;
        printf("\nEnter salaries:");
        
        scanf("%d",&salary);
        if (salary<200.0)
            break;
        salary -= 200;
        while (salary>=100){
            salary-=100;
            count++;
            if(count==8)
                break;
        }
        
        salaries[count]++;
    }
    
    for(int i = 0; i <9; i++){
        if (i==8){
            printf("$1000 and over: %d\n",salaries[i]);
            break;
        }
        printf("$%d00-%d99: %d\n",i+2,i+2,salaries[i]);
    }
    
    return (EXIT_SUCCESS);
}

Enter salaries:230

Enter salaries:400

Enter salaries:440

Enter salaries:566

Enter salaries:777

Enter salaries:1234

Enter salaries:568

Enter salaries:987

Enter salaries:99
$200-299: 1
$300-399: 0
$400-499: 2
$500-599: 2
$600-699: 0
$700-799: 1
$800-899: 0
$900-999: 1
$1000 and over: 1

RUN FINISHED; exit value 0; real time: 22s; user: 0ms; system: 0ms

-----------------------------------------------------------------------------

/* 
 * 6.36
 * Printing a String Backwards
 * Author: Xavier Loera Flores
 * 4/29/2018
 */

#include <stdio.h>
#include <stdlib.h>


void stringreverse(int counter, char stringReverse[]);
int main(int argc, char** argv) {
    printf("Please enter a string:\n");
    char stringReverse[100];
    int counter;
    counter = 0;
    scanf("%s", stringReverse);
    printf("\n");
    stringreverse(counter, stringReverse);
    return (EXIT_SUCCESS);
}

void stringreverse(int counter, char stringReverse[]){
    if (stringReverse[counter+1] != '\0') 
        stringreverse(counter+1, stringReverse);
    printf("%c",stringReverse[counter]);
}


Please enter a string:
banana

ananab
RUN FINISHED; exit value 0; real time: 7s; user: 0ms; system: 0ms






-----------------------------------------------------------------------------

/* 
 * 7.12
 * Card Shuffling
 * Author: Xavier Loera Flores
 * 4/22/2018
 */



#include<stdio.h>
#include<stdlib.h>
#include<time.h>

//main functions
void shuffle( int wDeck[][ 13 ] );
void deal( const int wDeck[][ 13 ], const char *wface[], const char *wSuit[], char *wfSuit[], char *wfFace[] );

//operation functions
void pair( const char *wfSuit[], const char *wfFace[]);
void twoPair( const char *wfSuit[], const char *wfFace[] );
void threeKind( const char *wfSuit[], const char *wfFace[] );
void fourKind( const char *wfSuit[], const char *wfFace[] );
void flush( const char *wfSuit[], const char *wfFace[] );
void straight( const char *wfSuit[], const char *wfFace[], const char *wFace[] );

//sub-operation functions
void printflush(  const char *wfFace[], const char *wfSuit[], const char statement[] );

int main(void){
 const char *suit[ 4 ] = { "Hearts", "Diamonds", "Clubs", "Spades" };

 //initialize face array
 const char *face[ 13 ] = { "Ace", "Deuce", "Three", "Four",
                            "Five", "Six", "Seven", "Eight",
                            "Nine", "Ten", "Jack", "Queen", "King" };

    //initialize suit and face array for storing five-hand card
 char *fSuit[ 5 ] ;
 char *fFace[ 5 ] ;

 int deck[ 4 ][ 13 ] = { 0 };
 srand( time( 0 ) );

 shuffle( deck );
 deal( deck, face, suit, fSuit, fFace );
 pair( fSuit, fFace );
 twoPair( fSuit, fFace );
 threeKind( fSuit, fFace );
 fourKind( fSuit, fFace );
 flush( fSuit, fFace );
 straight( fSuit, fFace, face );

 return 0;
}

void shuffle( int wDeck[][ 13 ] ){
 int row, column, card;

 for(card = 1; card <= 52; card++){
  do{
   row = rand() % 4;
   column = rand() % 13;
  }
  while(wDeck[ row ][ column ] != 0);

  wDeck[ row ][ column ] = card;
 }
}

void deal( const int wDeck[][ 13 ], const char *wFace[], const char *wSuit[], char *wfSuit[], char *wfFace[] ){
 int card, row, column, i;

 //deal 5-card poker hand
 for(card = 1, i = 0; card <= 5; card++, i++){
  for(row = 0; row < 4; row++){
   for(column = 0; column < 13; column++){
    if(wDeck[ row ][ column ] == card){
               wfSuit[ i ] = wSuit[ row ];
               wfFace[ i ] = wFace[ column ];
          }
   }
  }
 }

 //display 5-card poker hand
 printf("Your hand: \n");
 for(i = 0; i < 5; i++){
  printf("%10s of %-8s\n", wfFace[ i ], wfSuit[ i ]);
 }
}

void pair(const char *wfSuit[], const char *wfFace[]){
    int card, numpairs = 0, k;
    int pair[ 5 ] = { 0 };

    for(card = 0; card < 5; card++){
       for(int i = card + 1; i < 5; i++){
          if(wfFace[ card ] == wfFace[ i ]){
             numpairs++;
             pair[ card ] = i;
        }}}
    if(numpairs == 1){
      for(card = 0; card < 5; card++){
         if(pair[ card ] != 0){
            k = pair[ card ];
            printf("\nPair:");
            printf("\n%s of %s ----- %s of %s\n", wfFace[ card ], wfSuit[ card ], wfFace[ k ], wfSuit[ k ] );
        }}}
}

void twoPair( const char *wfSuit[], const char *wfFace[] ){
    int card, numpairs = 0, k;
    int pair[ 5 ] = { 0 };
    for(card = 0; card < 5; card++){
        for(int i = card + 1; i < 5; i++){
            if(wfFace[ card ] == wfFace[ i ]){
                numpairs++;
                pair[ card ] = i;
         }}}
    if(numpairs == 2){
        printf("\n2 Pair:\n");
        for(card = 0; card < 5; card++){
            if(pair[ card ] != 0){
                k = pair[ card ];
                printf("%s of %s ----- %s of %s\n", wfFace[ card ], wfSuit[ card ], wfFace[ k ], wfSuit[ k ] );
          }
       }
    }
}

void threeKind( const char *wfSuit[], const char *wfFace[] ){
    int card, i, j = 0, k, x;
    int pair[ 3 ] = { 0 };
    for(card = 0; card < 3; card++){
        for(i = card + 1; i < 5; i++){
           if(wfFace[ card ] == wfFace[ i ]){
              for(x = i + 1; x < 5; x++){
                 if(wfFace[ i ] == wfFace[ x ]){
                    j++;
                    pair[ 0 ] = card;
                    pair[ 1 ] = i;
                    pair[ 2 ] = x;         
                 }}}}}
    
    if(j == 1){
       printf("\nThree of a kind:");
       for(card = 0; card < 3; card++){
             k = pair[ card ];
             printf("\n%10s of %-8s\n", wfFace[ k ], wfSuit[ k ] );
       }}}

void fourKind( const char *wfSuit[], const char *wfFace[] ){
    int card, i, indi = 0, pair[ 5 ] = { 0 };
    for(card = 0; card < 2; card++){
       for(i = card + 1; i < 5; i++){
          if(wfFace[ card ] == wfFace[ i ]){ 
             indi++;
             if(indi == 1)
                pair[ i - 1 ] = 1;
             pair[ i ] = 1;   
             }
       }        
       if(indi == 3)
          break;
       else if(indi > 3)
          break;
       else{
          indi = 0;
          for(i = 0; i < 5; i++)
             pair[ i ] = 0;
       }}    
    
    //display result
    if(indi == 3){
       printf("\nFour of a kind...\n");
       for(i = 0; i < 5; i++){
         if( pair[ i ] == 1)
            printf("\n%5s of %-9s\n", wfFace[ i ], wfSuit[ i ] );
       }     
       printf("\n");
    }
}

void flush ( const char *wfSuit[], const char *wfFace[] ){
   int i, j = 0;
   for(i = 1; i < 5; i++){
      if(wfSuit[ 0 ] != wfSuit[ i ] )
         j++;
   }
   if(j==0)
   printflush( wfFace, wfSuit, "Flush:" );
}

void straight( const char *wfSuit[], const char *wfFace[], const char *wFace[] ){
   int pass, count, temp,k =0 ;
   int faceValue[ 5 ] = { 0 };
   for(int i = 0 ; i < 5; i++){
      for(int j = 0 ; j < 13; j++){
         if(wfFace[ i ] == wFace[ j ]){
            faceValue[ i ] = j;          
         }}}
   
   for(pass = 0; pass < 4; pass++){
      for(count = 0; count < 4; count++){
         if(faceValue[ count ] > faceValue[ count + 1 ]){
            temp = faceValue[ count ];
            faceValue[ count ] = faceValue[ count + 1 ];
            faceValue[ count + 1 ] = temp;              
         }}}
   for(int i = 0; i < 4; i++){
      if(faceValue[ i ] + 1 != faceValue[ i + 1 ])
        k =1;               
   }
   if (k==0)
        printflush( wfFace, wfSuit, "Straight:" );
}

void printflush( const char *wfFace[], const char *wfSuit[], const char type[] ){
        printf("%s", type ); 
        for(int i = 0; i < 5; i++){
            printf("\n  %5s of %-8s\n", wfFace[ i ], wfSuit[ i ] );
      }}


Your hand: 
     Seven of Spades  
     Three of Hearts  
      Nine of Diamonds
     Seven of Diamonds
     Three of Diamonds

2 Pair:
Seven of Spades ----- Seven of Diamonds
Three of Hearts ----- Three of Diamonds

RUN FINISHED; exit value 0; real time: 10ms; user: 0ms; system: 0ms


-----------------------------------------------------------------------------



/* 
 * 7.30
 * Calculating Circle Circumference, Circle Area or Sphere Volume Using Function Pointers
 * Author: Xavier Loera Flores
 * 4/25/2018
 */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>



void circumference(double radius);
void area(double radius);
void volume(double radius);

int main(int argc, char** argv) {
    void(*func[3])(double)={circumference, area, volume};
    int choice =0;
    double radius;
    while(choice!=-1){
        printf("\nSelect Calculation(-1 to end):\n"
                "1-Circumference\n1-Area\n3-Volume");
        scanf("%d", &choice);
        if(choice==-1)
            break;
        printf("Enter radius:\n");
        scanf("%lf", &radius);
        (*func[choice-1])(radius);
    }
    return (EXIT_SUCCESS);
}
void circumference(double radius){
    printf("Radius: %.2f\n",radius);
    printf("Circumference: %.2f\n", 2.0* M_PI *radius);

}
void area(double radius){
    printf("Radius: %.2f\n",radius);
    printf("Area: %.2f\n", M_PI *radius*radius);

}
void volume(double radius){
    printf("Radius: %.2f\n",radius);     
    printf("Volume: %.2f\n", (4.0/3.0)* M_PI *radius*radius*radius);

}



Select Calculation(-1 to end):
1-Circumference
1-Area
3-Volume1
Enter radius:
2 
Radius: 2.00
Circumference: 12.57

Select Calculation(-1 to end):
1-Circumference
1-Area
3-Volume2
Enter radius:
3
Radius: 3.00
Area: 28.27

Select Calculation(-1 to end):
1-Circumference
1-Area
3-Volume3
Enter radius:
2 
Radius: 2.00
Volume: 33.51

Select Calculation(-1 to end):
1-Circumference
1-Area
3-Volume-1

RUN FINISHED; exit value 0; real time: 18s; user: 0ms; system: 0ms

-----------------------------------------------------------------------------


/* 
 * 8.23
 * (strings Starting with "b") 
 * Author: Xavier Loera Flores
 * 4/28/2018
 */
#include <stdio.h>
#include <stdlib.h>


int main(int argc, char** argv) { 

    char string[20][20]; 
    printf( "Enter strings: ");
    for( int i = 0; i <5; ++i ) {
        puts("");
        scanf( "%s", &string[ i ][ 0] );
    } 
    printf( "\nStrings:\n");
    // loop through strings
    for( int i = 0; i < 5; ++i ) {
        if( 'b'== string[ i ][ 0] ) {
            printf( "%s\n", &string[ i ][ 0] );
        } 
    }
    return (EXIT_SUCCESS);
}
 
Enter strings: 
apple

boy

bat

band

top

Strings:
boy
bat
band

RUN FINISHED; exit value 0; real time: 16s; user: 0ms; system: 0ms


----------------------------------------------------------------------------

/* 
 * 8.24
 * (Strings Ending with "ed") 
 * Author: Xavier Loera Flores
 * 4/29/2018
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int main(int argc, char** argv) { 
    int length;
    char string[20][20]; 
        printf( "Enter strings: ");
    for( int i = 0; i <5; ++i ) { 
        puts("");
        scanf( "%s", &string[ i ][ 0] );
    } 
    printf( "\nStrings:\n");
    for( int i = 0; i < 5; ++i ) {
        length = strlen(string[i]);
        if( 'd'== string[ i][ length-1] && 'e'== string[i][length-2] ) {
            printf( "%s\n", &string[ i ][0 ] );
        } 
    }
    return (EXIT_SUCCESS);
}

Enter strings: 
ded

booked

mode

edededed

deep

Strings:
ded
booked
edededed

RUN FINISHED; exit value 0; real time: 24s; user: 0ms; system: 0ms




